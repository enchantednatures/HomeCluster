---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/helm.toolkit.fluxcd.io/helmrelease_v2beta2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: grafana
spec:
  interval: 30m
  chart:
    spec:
      chart: grafana
      version: 8.14.2
      sourceRef:
        kind: HelmRepository
        name: grafana
        namespace: flux-system
  maxHistory: 2
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    replicas: 1
    deploymentStrategy:
      type: Recreate
    admin:
      existingSecret: grafana-admin-secret
    env:
      GF_EXPLORE_ENABLED: true
      GF_SERVER_ROOT_URL: https://grafana.${SECRET_DOMAIN}
    envFromSecrets:
      - name: grafana-oauth-secret
    grafana.ini:
      server: # Add this section
        cookie_secure: true
      auth:
        signout_redirect_url: https://auth.${SECRET_DOMAIN}/application/o/grafana/end-session/
        oauth_auto_login: true
      auth.generic_oauth:
        name: authentik
        enabled: true
        allow_assign_grafana_admin: true
        scopes: openid profile email
        auth_url: https://auth.${SECRET_DOMAIN}/application/o/authorize/
        token_url: https://auth.${SECRET_DOMAIN}/application/o/token/
        api_url: https://auth.${SECRET_DOMAIN}/application/o/userinfo/
        # Optionally map user groups to Grafana roles
        role_attribute_path:
          contains(groups, 'Grafana Admins') && 'Admin' || contains(groups,
          'Grafana Editors') && 'Editor' || 'Viewer'
      auth.basic:
        enabled: false
      analytics:
        check_for_updates: false
        check_for_plugin_updates: false
        reporting_enabled: false
    dashboardProviders:
      dashboardproviders.yaml:
        apiVersion: 1
        providers:
          - name: default
            orgId: 1
            folder: ""
            type: file
            disableDeletion: false
            editable: true
            options:
              path: /var/lib/grafana/dashboards/default
          - name: flux
            orgId: 1
            folder: Flux
            type: file
            disableDeletion: false
            editable: true
            options:
              path: /var/lib/grafana/dashboards/flux
          - name: kubernetes
            orgId: 1
            folder: Kubernetes
            type: file
            disableDeletion: false
            editable: true
            options:
              path: /var/lib/grafana/dashboards/kubernetes
          - name: nginx
            orgId: 1
            folder: Nginx
            type: file
            disableDeletion: false
            editable: true
            options:
              path: /var/lib/grafana/dashboards/nginx
          - name: kafka
            orgId: 1
            folder: Kafka
            type: file
            disableDeletion: false
            editable: true
            options:
              path: /var/lib/grafana/dashboards/kafka
    datasources:
      datasources.yaml:
        apiVersion: 1
        deleteDatasources:
          - name: Prometheus
            orgId: 1
          - name: Loki
            orgId: 1
          - name: Alertmanager
            orgId: 1
        datasources:
          - name: Loki
            type: loki
            access: proxy
            url: http://loki-gateway.monitoring.svc.cluster.local:80
            jsonData:
              manageAlerts: true
              maxLines: 250
          - name: Alertmanager-Kube-Prometheus-Stack
            type: alertmanager
            access: proxy
            url: http://kube-prometheus-stack-alertmanager.monitoring.svc.cluster.local:9093
            jsonData:
              implementation: prometheus
              handleGrafanaManagedAlerts: true
            isDefault: false
          - name: Prometheus
            type: prometheus
            uid: prometheus
            access: proxy
            url: http://kube-prometheus-stack-prometheus.monitoring.svc.cluster.local:9090
            jsonData:
              manageAlerts: true
              prometheusType: Prometheus
            isDefault: false
          - name: Tempo
            type: tempo
            url: http://tempo.monitoring.svc.cluster.local:3100
            access: proxy
            jsonData:
              tracesToLogsV2:
                datasourceUid: Loki
                tags: [job, instance, pod, namespace]
                filterByTraceID: true
                filterBySpanID: true
                customQuery: true
              tracesToMetrics:
                datasourceUid: Prometheus
                tags:
                  - { key: service.name, value: service }
                  - { key: job }
              serviceMap:
                datasourceUid: Prometheus
              nodeGraph:
                enabled: true
              search:
                hide: false
              lokiSearch:
                datasourceUid: Loki
              traceQuery:
                timeShiftEnabled: true
              spanBar:
                type: Tag
                tag: http.path
            isDefault: false
    dashboards:
      default:
        cloudflared:
          gnetId: 17457 # https://grafana.com/grafana/dashboards/17457?tab=revisions
          revision: 6
          datasource:
            - { name: DS_PROMETHEUS, value: Prometheus }
        external-dns:
          gnetId: 15038 # https://grafana.com/grafana/dashboards/15038?tab=revisions
          revision: 1
          datasource: Prometheus
        # cert-manager:
        #   url: https://raw.githubusercontent.com/monitoring-mixins/website/master/assets/cert-manager/dashboards/cert-manager.json
        #   datasource: Prometheus
        node-exporter-full:
          gnetId: 1860 # https://grafana.com/grafana/dashboards/1860?tab=revisions
          revision: 31
          datasource: Prometheus
      flux:
        flux-cluster:
          url: https://raw.githubusercontent.com/fluxcd/flux2-monitoring-example/main/monitoring/configs/dashboards/cluster.json
          datasource: Prometheus
        flux-control-plane:
          url: https://raw.githubusercontent.com/fluxcd/flux2-monitoring-example/main/monitoring/configs/dashboards/control-plane.json
          datasource: Prometheus
      kubernetes:
        kubernetes-api-server:
          url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-system-api-server.json
          datasource: Prometheus
        kubernetes-coredns:
          url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-system-coredns.json
          datasource: Prometheus
        kubernetes-global:
          url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-views-global.json
          datasource: Prometheus
        kubernetes-namespaces:
          url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-views-namespaces.json
          datasource: Prometheus
        kubernetes-nodes:
          url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-views-nodes.json
          datasource: Prometheus
        kubernetes-pods:
          url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-views-pods.json
          datasource: Prometheus
      nginx:
        nginx:
          url: https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/grafana/dashboards/nginx.json
          datasource: Prometheus
        nginx-request-handling-performance:
          url: https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/grafana/dashboards/request-handling-performance.json
          datasource: Prometheus
      kafka:
        cruise-control:
          url: https://raw.githubusercontent.com/strimzi/strimzi-kafka-operator/refs/tags/0.45.0/examples/metrics/grafana-dashboards/strimzi-cruise-control.json
          datasource: Prometheus
        kafka:
          url: https://raw.githubusercontent.com/strimzi/strimzi-kafka-operator/refs/tags/0.45.0/examples/metrics/grafana-dashboards/strimzi-kafka.json
          datasource: Prometheus
    # alerting:
    #   alertmanagers:
    #     - name: discord-webhook
    #       namespace: monitoring
    #       service: alertmanager
    #       port: web
    #       pathPrefix: /
    #       scheme: http
    #       timeout: 10s
    #       apiVersion: v1
    #       webhook:
    #         url:
    #           valueFrom:
    #             secretKeyRef:
    #               name: discord-webhook-url
    #               key: url
    #         sendResolved: true

    sidecar:
      dashboards:
        enabled: true
        searchNamespace: ALL
        labelValue: ""
        label: grafana_dashboard
        folderAnnotation: grafana_folder
        provider:
          disableDelete: true
          foldersFromFilesStructure: true
      datasources:
        enabled: true
        searchNamespace: ALL
        labelValue: ""
    serviceMonitor:
      enabled: true
    ingress:
      enabled: true
      ingressClassName: external
      annotations:
        external-dns.alpha.kubernetes.io/target: external.${SECRET_DOMAIN}
        external-dns.alpha.kubernetes.io/is-public: "true"
      hosts: [&host "grafana.${SECRET_DOMAIN}"]
      tls:
        - hosts: [*host]
    testFramework:
      enabled: false
    extraSecretMounts:
      - name: auth-generic-oauth-secret-mount
        secretName: grafana-oauth-secret
        defaultMode: 0440
        mountPath: /etc/secrets/auth_generic_oauth
        readOnly: true
