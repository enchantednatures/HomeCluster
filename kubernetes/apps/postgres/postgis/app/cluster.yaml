# yaml-language-server: $schema=https://kubernetes-schemas.zinn.ca/postgresql.cnpg.io/cluster_v1.json
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: postgis-db
  labels:
    app.kubernetes.io/name: postgis-db
spec:
  # renovate: datasource=docker depName=ghcr.io/cloudnative-pg/postgis versioning=redhat
  imageName: ghcr.io/cloudnative-pg/postgis:17-3.5-18
  instances: 3
  primaryUpdateStrategy: unsupervised
  storage:
    size: 10Gi
    storageClass: csi-nfs
  enableSuperuserAccess: true
  superuserSecret:
    name: postgis-superuser
  postgresql:
    parameters:
      max_connections: "300"
      shared_buffers: 512MB
      # Memory configuration - optimized for 4GB total RAM
      shared_buffers: "1GB" # 25% of RAM
      effective_cache_size: "3GB" # 75% of RAM
      work_mem: "32MB"
      maintenance_work_mem: "256MB"
      # Write-ahead log
      wal_level: "logical"
      max_wal_size: "1GB"
      min_wal_size: "512MB"
      # Query planner
      random_page_cost: "1.1" # Assuming SSD storage
      effective_io_concurrency: "100"
      # Parallel query settings - reduced for smaller instance
      max_parallel_workers_per_gather: "2"
      max_parallel_workers: "4"
      max_parallel_maintenance_workers: "2"
      # OSM specific optimizations
      autovacuum_vacuum_scale_factor: "0.1"
      autovacuum_analyze_scale_factor: "0.05"
      checkpoint_completion_target: "0.9"
      default_statistics_target: "500"
      # Extensions needed for OSM
      shared_preload_libraries: "postgis"
  # pg_hba:
  #   - host all all 10.244.0.0/16 md5
  monitoring:
    enablePodMonitor: true
  backup:
    retentionPolicy: 30d
    barmanObjectStore: &barmanObjectStore
      data:
        compression: bzip2
      wal:
        compression: bzip2
        maxParallel: 8
      destinationPath: s3://cloudnative-pg/
      endpointURL: https://s3.${SECRET_DOMAIN}
      # Note: serverName version needs to be incremented
      # when recovering from an existing cnpg cluster
      serverName: &currentCluster postgis-v0
      s3Credentials:
        accessKeyId:
          name: cloudnative-pg-postgis-secret
          key: aws-access-key-id
        secretAccessKey:
          name: cloudnative-pg-postgis-secret
          key: aws-secret-access-key
  # Note: previousCluster needs to be set to the name of the previous
  # cluster when recovering from an existing cnpg cluster
  bootstrap:
    initdb:
      database: app
      owner: app
      secret:
        name: postgis-app-user
      postInitTemplateSQL:
        - CREATE EXTENSION postgis;
        - CREATE EXTENSION postgis_topology;
        - CREATE EXTENSION fuzzystrmatch;
        - CREATE EXTENSION postgis_tiger_geocoder;
        # recovery:
        #   source: &previousCluster postgis-v0
  # Note: externalClusters is needed when recovering from an existing cnpg cluster
  # externalClusters:
  #   - name:  &previousCluster postgres16-v0 #*previousCluster postgres16-v6
  #     barmanObjectStore:
  #       <<: *barmanObjectStore
  #       serverName: *previousCluster
