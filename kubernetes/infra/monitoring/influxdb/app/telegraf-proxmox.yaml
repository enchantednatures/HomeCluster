---
apiVersion: v1
kind: ConfigMap
metadata:
  name: telegraf-proxmox-config
  namespace: monitoring
  labels:
    app.kubernetes.io/name: telegraf
    app.kubernetes.io/component: metrics-collector
data:
  telegraf.conf: |
    # Telegraf Configuration for Proxmox Metrics Collection

    # Global tags can be specified here in key="value" format.
    [global_tags]
      environment = "homelab"
      cluster = "proxmox"

    # Configuration for telegraf agent
    [agent]
      ## Default data collection interval for all inputs
      interval = "30s"
      ## Rounds collection interval to 'interval'
      ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
      round_interval = true

      ## Telegraf will send metrics to outputs in batches of at most
      ## metric_batch_size metrics.  This controls the size of writes that
      ## Telegraf sends to output plugins.
      metric_batch_size = 1000

      ## Maximum number of unwritten metrics per output.  Increasing this value
      ## allows for longer periods of output downtime without dropping metrics at
      ## the cost of higher maximum memory usage.
      metric_buffer_limit = 10000

      ## Collection jitter is used to jitter the collection by a random amount.
      ## Each plugin will sleep for a random time within jitter before collecting.
      ## This can be used to avoid many plugins querying things like sysfs at the
      ## same time, which can have a measurable effect on the system.
      collection_jitter = "5s"

      ## Default flushing interval for all outputs. Maximum flush_interval will be
      ## flush_interval + flush_jitter
      flush_interval = "30s"
      ## Jitter the flush interval by a random amount. This is primarily to avoid
      ## large write spikes for users running a large number of telegraf instances.
      ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
      flush_jitter = "5s"

      ## By default or when set to "0s", precision will be set to the same
      ## timestamp order as the collection interval, with the maximum being 1s.
      ##   ie, when interval = "10s", precision will be "1s"
      ##       when interval = "250ms", precision will be "1ms"
      ## Precision will NOT be used for service inputs. It is up to each individual
      ## service input to set the timestamp at the appropriate precision.
      ## Valid time units are "ns", "us" (or "Âµs"), "ms", "s".
      precision = "1s"

      ## Log at debug level.
      # debug = false
      ## Log only error level messages.
      # quiet = false

      ## Log target controls the destination for logs and can be one of "file",
      ## "stderr" or, on Windows, "eventlog".  When set to "file", the output file
      ## is determined by the "logfile" setting.
      # logtarget = "file"

      ## Name of the file to be logged to when using the "file" logtarget.  If set to
      ## the empty string then logs are written to stderr.
      # logfile = ""

      ## The logfile will be rotated after the time interval specified.  When set
      ## to 0 no time based rotation is performed.  Logs are rotated only when
      ## written to, if there is no log activity rotation may be delayed.
      # logfile_rotation_interval = "0d"

      ## The logfile will be rotated when it becomes larger than the specified
      ## size.  When set to 0 no size based rotation is performed.
      # logfile_rotation_max_size = "0MB"

      ## Maximum number of rotated archives to keep, any older logs are deleted.
      ## If set to -1, no archives are removed.
      # logfile_rotation_max_archives = 5

      ## Pick a timezone to use when logging or type 'local' for local time.
      ## Example: America/New_York
      # log_with_timezone = ""

      ## Override default hostname, if empty use os.Hostname()
      hostname = ""
      ## If set to true, do no set the "host" tag in the telegraf agent.
      omit_hostname = false

    ###############################################################################
    #                            OUTPUT PLUGINS                                   #
    ###############################################################################

    # Configuration for sending metrics to InfluxDB v2
    [[outputs.influxdb_v2]]
      ## The URLs of the InfluxDB cluster nodes.
      ##
      ## Multiple URLs can be specified for a single cluster, only ONE of the
      ## urls will be written to each interval.
      ##   ex: urls = ["https://us-west-2-1.aws.cloud2.influxdata.com"]
      urls = ["https://influxdb.${SECRET_DOMAIN}"]

      ## API token for authentication.
      token = "$INFLUX_TOKEN"

      ## Organization is the name of the organization you wish to write to; must exist.
      organization = "homelab"

      ## Destination bucket to write into.
      bucket = "proxmox"

      ## The value of this tag will be used to determine the bucket.  If this
      ## tag is not set the 'bucket' option is used as the default.
      # bucket_tag = ""

      ## If true, the bucket tag will not be added to the metric.
      # exclude_bucket_tag = false

      ## Timeout for HTTP messages.
      # timeout = "5s"

      ## Additional HTTP headers
      # http_headers = {"X-Special-Header" = "Special-Value"}

      ## HTTP Proxy override, if unset values the standard proxy environment
      ## variables are consulted to determine which proxy, if any, should be used.
      # http_proxy = "http://corporate.proxy:3128"

      ## HTTP User-Agent
      # user_agent = "telegraf"

      ## Content-Encoding for write request body, can be set to "gzip" to
      ## compress body or "identity" to apply no encoding.
      # content_encoding = "gzip"

      ## Enable or disable uint support for writing uints influxdb 2.0.
      # influx_uint_support = false

      ## Optional TLS Config for use on HTTP connections.
      # tls_ca = "/etc/telegraf/ca.pem"
      # tls_cert = "/etc/telegraf/cert.pem"
      # tls_key = "/etc/telegraf/key.pem"
      ## Use TLS but skip chain & host verification
      # insecure_skip_verify = false

    ###############################################################################
    #                            INPUT PLUGINS                                    #
    ###############################################################################

    # Read metrics about cpu usage
    [[inputs.cpu]]
      ## Whether to report per-cpu stats or not
      percpu = true
      ## Whether to report total system cpu stats or not
      totalcpu = true
      ## If true, collect raw CPU time metrics
      collect_cpu_time = false
      ## If true, compute and report the sum of all non-idle CPU states
      report_active = false
      ## If true and the info is available then add core_id and physical_id tags
      core_tags = false

    # Read metrics about disk usage by mount point
    [[inputs.disk]]
      ## By default stats will be gathered for all mount points.
      ## Set mount_points will restrict the stats to only the specified mount points.
      # mount_points = ["/"]

      ## Ignore mount points by filesystem type.
      ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]

      ## Ignore mount points by mount options.
      ## The 'mount' command reports options of all mounts in parens.
      ## Bind mounts can be ignored with the special 'bind' option.
      # ignore_mount_opts = []

    # Read metrics about disk IO by device
    [[inputs.diskio]]
      ## By default, telegraf will gather stats for all devices including
      ## disk partitions.
      ## Setting devices will restrict the stats to the specified devices.
      # devices = ["sda", "sdb", "vd*"]
      ## Uncomment the following line if you need disk serial numbers.
      # skip_serial_number = false
      #
      ## On systems which support it, device metadata can be added in the form of
      ## tags.
      ## Currently only Linux is supported via udev properties. You can view
      ## available properties for a device by running:
      ## 'udevadm info -q property -n /dev/sda'
      ## Note: Most, but not all, udev properties can be accessed this way. Properties
      ## that are currently inaccessible include DEVTYPE, DEVNAME, and DEVPATH.
      # device_tags = ["ID_FS_TYPE", "ID_FS_USAGE"]
      #
      ## Using the same metadata source as device_tags, you can also customize the
      ## name of the device via templates.
      ## The 'name_templates' parameter is a list of templates to try and apply to
      ## the device. The template may contain variables in the form of '$PROPERTY' or
      ## '${PROPERTY}'. The first template which does not contain any variables not
      ## present for the device is used as the device name tag.
      ## The typical use case is for LVM volumes, to get the VG/LV name instead of
      ## the near-meaningless DM-0 name.
      # name_templates = ["$ID_FS_LABEL","$DM_VG_NAME/$DM_LV_NAME"]

    # Get kernel statistics from /proc/stat
    [[inputs.kernel]]
      # no configuration

    # Read metrics about memory usage
    [[inputs.mem]]
      # no configuration

    # Get the number of processes and group them by status
    [[inputs.processes]]
      # no configuration

    # Read metrics about swap memory usage
    [[inputs.swap]]
      # no configuration

    # Read metrics about system load & uptime
    [[inputs.system]]
      ## Uncomment to remove deprecated metrics.
      # fielddrop = ["uptime_format"]

    # Read metrics about network interface usage
    [[inputs.net]]
      ## By default, telegraf gathers stats from any up interface (excluding loopback)
      ## Setting interfaces will tell it to gather these explicit interfaces,
      ## regardless of status.
      ##
      # interfaces = ["eth0"]
      ##
      ## On linux systems telegraf also collects protocol stats.
      ## Setting ignore_protocol_stats to true will skip reporting of protocol metrics.
      ##
      # ignore_protocol_stats = false
      ##

    # Read TCP metrics such as established, time_wait and sockets counts.
    [[inputs.netstat]]
      # no configuration

    # Monitor process cpu and memory usage
    [[inputs.procstat]]
      ## PID file to monitor process
      # pid_file = "/var/run/nginx.pid"
      ## executable name (ie, pgrep <exe>)
      exe = "pvestatd"
      ## pattern as argument for pgrep (ie, pgrep -f <pattern>)
      # pattern = "nginx"
      ## user as argument for pgrep (ie, pgrep -u <user>)
      # user = "nginx"
      ## Systemd unit name, supports globs when include_systemd_children is set to true
      # systemd_unit = "nginx.service"
      # include_systemd_children = false
      ## CGroup name or path, supports globs when include_cgroup_children is set to true
      # cgroup = "systemd/system.slice/nginx.service"
      # include_cgroup_children = false
      ## Windows service name
      # win_service = ""
      ## override for process_name
      ## This is optional; default is sourced from /proc/<pid>/status
      # process_name = "bar"
      ## Field name prefix
      prefix = "proxmox_"
      ## When true add the full cmdline as a tag.
      # cmdline_tag = false
      ## Add PID as a tag instead of a field; useful to differentiate between
      ## processes whose tags are otherwise the same.  Can create a large number
      ## of series, use judiciously.
      # pid_tag = false
      ## Method to use when finding process IDs.  Can be one of 'pgrep', or
      ## 'native'.  The pgrep finder calls the pgrep executable in the PATH while
      ## the native finder performs the search directly in a manor dependent on the
      ## platform.  Default is 'pgrep'
      # pid_finder = "pgrep"

    # Proxmox VE specific metrics
    [[inputs.exec]]
      ## Commands array
      commands = [
        "/usr/bin/pvesh get /nodes/localhost/status --output-format json",
        "/usr/bin/pvesh get /cluster/resources --output-format json"
      ]

      ## Timeout for each command to complete.
      timeout = "30s"

      ## measurement name suffix (for separating different commands)
      name_suffix = "_proxmox"

      ## Data format to consume.
      ## Each data format has its own unique set of configuration options, read
      ## more about them here:
      ## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_INPUT.md
      data_format = "json"

      ## Tag keys that should be added as tags (not fields) to the metric
      tag_keys = [
        "node",
        "type",
        "id"
      ]

    # Temperature monitoring (if available)
    [[inputs.sensors]]
      ## Remove numbers from field names.
      ## If true, a field name like 'temp1_input' will be changed to 'temp_input'.
      # remove_numbers = true

      ## Timeout is the maximum amount of time that the sensors command can run.
      # timeout = "5s"

    # Smart disk monitoring
    [[inputs.smart]]
      ## Optionally specify the path to the smartctl executable
      # path_smartctl = "/usr/bin/smartctl"

      ## Optionally specify the path to the nvme-cli executable
      # path_nvme = "/usr/bin/nvme"

      ## Optionally specify if vendor specific attributes should be propagated for NVMe disk case
      ## ["auto-on"] - automatically find and enable additional vendor specific disk info
      ## ["vendor1", "vendor2", ...] - e.g. "Intel" enable additional Intel specific disk info
      # enable_extensions = ["auto-on"]

      ## On most platforms used cli utilities requires root access.
      ## Setting 'use_sudo' to true will make use of sudo to run smartctl or nvme-cli.
      ## Sudo must be configured to allow the telegraf user to run smartctl or nvme-cli
      ## without a password.
      # use_sudo = false

      ## Skip checking disks in this power mode. Defaults to
      ## "standby" to not wake up disks that have stopped rotating.
      ## See --nocheck in the man pages for smartctl.
      ## smartctl version 5.41 and 5.42 have faulty detection of
      ## power mode and might require changing this value to
      ## "never" depending on your disks.
      # nocheck = "standby"

      ## Gather all returned S.M.A.R.T. attribute metrics and the detailed
      ## information from each drive into the 'smart_attribute' measurement.
      # attributes = false

      ## Optionally specify devices to exclude from reporting if disks auto-discovery is performed.
      # excludes = [ "/dev/pass6" ]

      ## Optionally specify devices and device type, if unset
      ## a scan (smartctl --scan and smartctl --scan -d nvme) for S.M.A.R.T. devices will be done
      ## and all found will be included except for the excluded in excludes.
      # devices = [ "/dev/ada0 -d atacam", "/dev/nvme0"]

      ## Timeout for the cli command to complete.
      # timeout = "30s"
